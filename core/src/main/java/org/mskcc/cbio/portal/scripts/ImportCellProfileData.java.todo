/* LICENSE_TBD */

package org.mskcc.cbio.portal.scripts;

import java.io.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.Set;

import joptsimple.*;
import org.mskcc.cbio.portal.model.*;
import org.mskcc.cbio.portal.util.*;

/**
 * Import 'cell profile' files that contain data matrices indexed by cell, case.
 *
 * @author Charlie Xia l.c.xia@stanford.edu
 */
public class ImportCellProfileData extends ConsoleRunnable {

    public void run() {
        try {
            String description = "Import 'cell profile' files that contain data matrices indexed by cell, case";
            // using a real options parser, helps avoid bugs

            OptionSet options = ConsoleUtil.parseStandardDataAndMetaOptions(args, description, true);
            File dataFile = new File((String) options.valueOf("data"));
            File descriptorFile = new File((String) options.valueOf( "meta" ) );
            SpringUtil.initDataSource();
            ProgressMonitor.setCurrentMessage("Reading data from:  " + dataFile.getAbsolutePath());
            CellProfile cellProfile = null;
            String cellPanel = null;
            try {
                cellProfile = CellProfileReader.loadCellProfile( descriptorFile ); //FIX
                //cellPanel = CellProfileReader.loadCellPanelInformation( descriptorFile );
            } catch (java.io.FileNotFoundException e) {
                throw new java.io.FileNotFoundException("Descriptor file '" + descriptorFile + "' not found.");
            }
            int numLines = FileUtil.getNumLines(dataFile);
            ProgressMonitor.setCurrentMessage(
                    " --> profile id:  " + cellProfile.getCellProfileId() +
                    "\n --> profile name:  " + cellProfile.getProfileName() +
                    "\n --> genetic alteration type:  " + cellProfile.getCellAlterationType().name());
            ProgressMonitor.setMaxValue(numLines);
            if(true) {
                ImpotTabDelimData importer = new ImportTabDelimData(dataFile, cellProfile.getTargetLine(), cellProfile.getCellProfileId(), cellPanel);
                importer.importData(numLines);
            }
       }
       catch (Exception e) {
    	   e.printStackTrace();
           throw new RuntimeException(e);
       }
    }

    /**
     * Makes an instance to run with the given command line arguments.
     *
     * @param args  the command line arguments to be used
     */
    public ImportCellProfileData(String[] args) {
        super(args);
    }

    /**
     * Runs the command as a script and exits with an appropriate exit code.
     *
     * @param args  the arguments given on the command line
     */
    public static void main(String[] args) {
        ConsoleRunnable runner = new ImportCellProfileData(args);
        runner.runInConsole();
    }
}
